		###############################################
		** 		   Re Arranging CSS and JS files     **
		###############################################
I need to rearange all the the js and css files it is a total mess. Should also add a better support for Jquery support

		###############################################
		**	 		   JQuery UI helpers             **
		###############################################
It would be cool to have a Jquery ui code helpers for all widgets there is taking in account all the options etc. 

		###############################################
		**	 		    Value Checkers               **
		###############################################
It is important to be able to check the type of a value, so need to make something like this which will actually
Check this and will be able to be extended. By default there should be the classical cherckers
URL, email, integer, string, with min lenght etc options. 

They shall return an Exception if things go wrong. The exception should be an extension of UserException 
so that nice errors can always be shown to users

		###############################################
		**	 		    Form Generators              **
		###############################################
This is can only be done once the value checkers are coded. It will work quite like zend with a quite nice default visualisation. 
They will be coded as SubControllers this way they can be replaced later on by a developper who wants to add his own impovements.

		###############################################
		**	 		 Admin Page Template             **
		###############################################
An admin page template that checks the usser permissions

		###############################################
		**	       Permission edition Page           **
		###############################################
Will allow admins to affect permissions. The permission plugin is already done. 


####################################################################################
####################################################################################
LESS IMPORTANT STUFF THAT WILL BE DONE IN TIME
####################################################################################
####################################################################################

		###############################################
		** 		     A Simple Identified Data        **
		###############################################
Will work as a limited storage saving system. The main purpose is to use this when we want to limit database acceses.
It dosen't need to be perfect, it just need to save some limited number of information for each id given. This can be used
for a live chat purpose for exemple. It needs to be enchanced with the Permission Agent.

		###############################################
		** 		  Temporary Files Management         **
		###############################################
This will allow to save in Files data that are hard to be calculated and doesen't need to be 100%
up to date. This may just be a resize jpeg image or other data.
	What We need :
		-a Data abstract OWeb/types/Data
			*getData()->string (returns the string to save)

		-Abstract Temporary File updater OWeb\types\TemporaryFile\Updater : This will decide if the File needs to be updated
			*isUpToDate()->boolean

		-Temporary File updater OWeb\types\TemporaryFile\Time : This will decide if the file needs to be updated according to the time allepsed since it's creation
			*setTime($seconds);

		-a Temporary File : OWeb\types\TemporaryFile
			*constructor($fileName, $Path, $data, new OWeb\types\TemporaryFile\Updater())
			*getCreationDate()->int : Time on which the file was created
			*updated() : Was the file updated at this load

		-a Temporary File Manager : OWeb/manager/TemporaryFiles
			*GetTempFile($fileName, $Path | $asker, $data)->OWeb\types\TemporaryFile

	Settings :
		[OWeb\types\TemporaryFile]
			active = true	;Default value
			reset = false	;Activationg this will delete all Temporary files.


	Notes :
		-Files will be place in a /tmp folder.

        ###############################################
        ** 		            Tasks                    **
        ###############################################
Tasks is a list of a synchrone works that needs to be done by the frame work withoud affectiong the user in any way.
    What we need
        -a Task abstract
            *constructor($className, array() $params)
        - a Task manager
            *auto initialised on need
            *doATask(); //will just find a task and do it(if there is any)
            *saveTask(Task $task); //Saves the task to the tasks that needs to be done.
    !!WE need to lokout for 2 different instances of the FrameWork doesn't do the same work at the same time.
    Tasks will be saved in files and we will place a lock on the file of the ongoing task in order to prevent this.

		###############################################
		** 		        A image resize Tool          **
		###############################################
In many articles I might put big images, it would be nice if this images could be aproximatally resized to the needed size
In order to make loading faster. The system should work step by step, if a 700*500px image needed it shoul use a 800*600 resize.
This way you might use the image in any size. We will use the Temporart File Management system to save these images
    What we need
        -a Image resize Tool, that will auto initialise it self if needed only. (We might make an extension so that it can be easily replaced)
            *getImage(String $url, $width, $height) -> String
                This will just take in parameter the url of the image to resize, It will do the resize(add it to the todo list)
                And will send the new URL.
    The tricky part is if there is a lot if images in one page it can't resize all of them at once. In this case knowing it didn't resize it
    it will return the old image url and add the image resize process to the quee of Tasks.